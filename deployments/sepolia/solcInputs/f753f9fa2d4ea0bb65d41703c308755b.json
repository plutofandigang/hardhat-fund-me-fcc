{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./PriceConverter.sol\";\n\nerror FundMe_NotOwner();\n\n/* \n@title A contract for crowd funding.\n@author Pluto Yang\n@notice This contract is for the purpose of learning solidity.\n@dev This implements price feeds as our library.\n */\ncontract FundMe {\n\tusing PriceConverter for uint256;\n\n\tuint256 public constant MINIMUM_USD = 50 * 10e18;\n\taddress[] public funders;\n\tmapping(address => uint) public addressToAmountFounded;\n\taddress public immutable i_owner;\n\tAggregatorV3Interface public priceFeed;\n\n\tmodifier onlyOwner() {\n\t\tif (msg.sender != i_owner) revert FundMe_NotOwner();\n\t\t_;\n\t}\n\n\tconstructor(address priceFeedAddress) {\n\t\ti_owner = msg.sender;\n\t\tpriceFeed = AggregatorV3Interface(priceFeedAddress);\n\t}\n\n\treceive() external payable {\n\t\tfund();\n\t}\n\n\tfallback() external payable {\n\t\tfund();\n\t}\n\n\t/* \n@notice This contract is for funding .\n@dev This implements price feeds as our library.\n@ prama or return???\n */\n\tfunction fund() public payable {\n\t\trequire(\n\t\t\tmsg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\n\t\t\t\"You need to send at least 50 USD\"\n\t\t);\n\t\tfunders.push(msg.sender);\n\t\taddressToAmountFounded[msg.sender] += msg.value;\n\t}\n\n\tfunction withdraw() public onlyOwner {\n\t\tfunders = new address[](0);\n\t\t(bool callSuccess, ) = payable(msg.sender).call{\n\t\t\tvalue: address(this).balance\n\t\t}(\"\");\n\t\trequire(callSuccess, \"Call Failed\");\n\t}\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\n        \n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        // 3000.00000000\n        return uint256(price * 1e10);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethAmount * ethPrice) / 10e18;\n        return ethAmountInUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}